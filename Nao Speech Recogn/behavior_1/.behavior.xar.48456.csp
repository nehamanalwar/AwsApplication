<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="100">
            <Box name="Speech Reco." id="1" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="122" y="92">
              <bitmap>media/images/box/interaction/ear.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
              <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
              <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="Monmouth University;classroom 211 ;Dr.Wang;Graduate Programs;Application Deadlines;Graduate Admissions;Scholarship;average class size;admission offices;transfer credits;register;financial aid;course schedules;payment;refund;International Admission;Software Engineering and Computer Science;Who are you;How are you;MSSE;MSIS;MSCS;name;Neha" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
              <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
              <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
              <Resource name="Speech recognition" type="Lock" timeout="0" />
            </Box>
            <Box name="Test" id="6" localization="8" tooltip="" x="145" y="266">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        #self.onStopped() #activate the output of the box
        tts = ALProxy("ALTextToSpeech")
        if("name" in p):
            tts.say("I am NAO Robot, The Rockstar!")
        if("Who are you" in p):
            tts.say("I am NAO Robot, The Rockstar!")
        if("How are you" in p):
            tts.say("I am good, Thank you!,What about you?")
        if("Monmouth University" in p):
            tts.say("West Long Branch , New Jersey")

        if("classroom 211" in p):
            tts.say("It is located in school of science, 2nd floor")

        if("Dr.Wang" in p):
            tts.say("It is located in Howard hall \\pau=1000\\ of room 213")
        if("Graduate Programs" in p):
            tts.say("There are 3 graduate prgrams, Software Engineering, MIS, Computer Science")

        if("Application Deadlines" in p):
            tts.say("May 1 for Summer, July 15 for Fall and, December 1 for Spring")

        if("Graduate Admissions" in p):
            tts.say("Laurie Kuhn, Associate Director of Graduate Admission, Her email address is, gradadm@monmouth.edu")

        if("Scholarship" in p):
            tts.say("please contact the Office of Admission at, 800-543-9671, or 732-571-3456 ,about scholarship availability")

        if("average class size" in p):
            tts.say("Class size will vary from course to course, but the average class size is 21 students")

        if("admission offices" in p):
            tts.say("The Offices of Undergraduate, and Graduate Admission, are located in Wilson Hall, on the first floor")

        if("transfer credits" in p):
            tts.say("After you have been admitted into your graduate program, you can apply to transfer graduate credit, by completing a transfer of credit form, which can be obtained, in the Office of the Registrar, and submitting it to your academic department")

        if("register" in p):
            tts.say("Once you have been admitted to a graduate program, you may consult with a Graduate Admission Counselor, or the appropriate academic department to register for classes")

        if("financial aid" in p):
            tts.say("There are scholarships and student loans available for graduate students, who meet the eligibility criteria. Graduate assistantships are also available. Interested graduate students should visit the, Office of Financial Aid section of our website")

        if("course schedules" in p):
            tts.say("A Schedule of Courses can be accessed online at, WebAdvisor or through the Registrar’s Web site")

        if("payment" in p):
            tts.say("The Tuition Management Systems (TMS) offers a monthly payment plan that is available for graduate student use.If you need more detailed information, you should contact, the Bursar’s Office")

        if("refund" in p):
            tts.say("Yes. Tuition and other refundable fees will be refunded, upon withdrawal from fall or spring semester courses, according to the schedule detailed in the Graduate School Catalog")

        if("International Admission" in p):
            tts.say("Applicants whose native language is not English, must provide proof of English proficiency")

        if("Software Engineering and Computer Science" in p):
            tts.say("Main goalof Software Engineering is, to build effective software systems, using a rigorous engineering approach and for computer science is, to provide the basic science and, practical techniques of computing hardware and software")

        if("MSSE" in p):
            tts.say(" The Master of science in software Engineering is a, 30-40.5 credit program. You will learn whhole software development life cycle.This program offers thesis and non-thesis tracks, with an optional advanced-level curriculum")

        if("MSIS" in p):
            tts.say("The master of science in information systems is a 30-43.5 credit program. It is an applied program of study that combines topics from field of computer science, software engineering, and management. This program offers technology and, management track")

        if("MSCS" in p):
            tts.say("The master of science in Computer science is a 30-42 credit program. This program enhances, versatility and, capability for employment advancement and career paths")









        self.onStopped()



    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="1" indexofinput="3" outputowner="1" indexofoutput="5" />
            <Link inputowner="1" indexofinput="3" outputowner="1" indexofoutput="6" />
            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="5" />
            <Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="4" />
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
